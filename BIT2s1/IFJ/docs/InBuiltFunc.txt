inputi (0 parametru, 2 navratove)
inputf (0 parametru, 2 navratove)
inputs (0 parametru, 2 navratove)

print(0...n, 0)


func int2float(i int) (float64)
a := 0.0
a = int2float(15)

PUSHS int@15
CALL int2float


LABEL int2float

CREATEFRAME
DEFVAR TF@$1
DEFVAR TF@$2
POPS TF@$1

INT2FLOAT TF@$2 TF@$1

PUSHS TF@$2
RETURN




func float2int(i float) (int)
a := 0.0
a = float2int(15.99)

PUSHS float@nejake hexa cislo
CALL float2int

LABEL float2int

CREATEFRAME
DEFVAR TF@$1
DEFVAR TF@$2
POPS TF@$1

FLOAT2INT TF@$2 TF@$1

PUSHS TF@$2
RETURN
--------------------------------------------------

func len(s string) (int)

LABEL len
CREATEFRAME

DEFVAR TF@s
POPS TF@s

DEFVAR TF@$1

STRLEN TF@$1 TF@s

PUSHS TF@$1

RETURN
--------------------------------------------------

func chr(i int) (string, int)
i := 65 // A
letter := ""
err := 0
letter, err = chr(i)

PUSHS int@i
CALL chr
POPS
POPS

LABEL chr
CREATEFRAME

DEFVAR TF@$0
DEFVAR TF@$1
DEFVAR TF@$2

POPS TF@$1
LT TF@$compareResult TF@$1 int$0
JUMPIFEQ $chr_error TF@$compareResult bool@true
GT TF@$compareResult TF@$1 int$255
JUMPIFEQ $chr_error TF@$compareResult bool@true

INT2CHAR TF@$2
PUSHS int@0
PUSHS string@$2
RETURN

LABEL $chr_error
PUSHS int@1 
PUSHS string@/000
RETURN
--------------------------------------------------
func substr(s string, i int, n int) (string, int) // TODO
‚Äì Vr√°t√≠ pod≈ôetƒõzec zadan√©ho ≈ôetƒõzce ùë†. Druh√Ωm parametrem ùëñ je d√°n zaƒç√°tek po≈æadovan√©ho pod≈ôetƒõzce
(poƒç√≠t√°no od nuly) a t≈ôet√≠ parametr ùëõ urƒçuje d√©lku pod≈ôetƒõzce. Je-li index ùëñ mimo
meze 0 a≈æ len(s) nebo ùëõ < 0, vrac√≠ funkce v p≈ô√≠znaku chyby hodnotu 1. Je-li ùëõ >
len(s)‚àíùëñ, jsou jako ≈ôetƒõzec vr√°ceny od ùëñ-t√©ho znaku v≈°echny zb√Ωvaj√≠c√≠ znaky ≈ôetƒõzce

---------------------------------------------------
func ord(s string, i int) (int, int) // TODO


---- greaterOrEqual ----
LABEL $greaterOrEqual

DEFVAR TF@$op1
DEFVAR TF@$op2
DEFVAR TF@$res
DEFVAR TF@$res1
DEFVAR TF@$res2

POPS TF@$op2
POPS TF@$op1

GT TF@$res1 TF@$op1 TF@$op2
EQ TF@$res2 TF@$op1 TF@$op2
OR TF@$res TF@$res1 TF@$res2
PUSHS TF@$res
RETURN

---- lesserOrEqual ----
LABEL $lesserOrEqual

DEFVAR TF@$op1
DEFVAR TF@$op2
DEFVAR TF@$res
DEFVAR TF@$res1
DEFVAR TF@$res2

POPS TF@$op2
POPS TF@$op1

LT TF@$res1 TF@$op1 TF@$op2
EQ TF@$res2 TF@$op1 TF@$op2
OR TF@$res TF@$res1 TF@$res2
PUSHS TF@$res
RETURN

--- FOR ----
vysl := 1
a := 4
for ; a > 0; a = a - 1 {
    vysl = vysl * a
}

DEFVAR LF@vysl
MOVE LF@vysl int@1
DEFVAR LF@a
MOVE LF@a int@5

LABEL $for0

#--- a > 0, skoc na konec for pokud neplati podminka ----

GT TF@$result LF@a int@0

JUMPIFEQ $for_end0 TF@$result bool@false

#--- BODY ----

CREATEFRAME
DEFVAR TF@$operand1
DEFVAR TF@$operand2
DEFVAR TF@$result

MUL TF@$result LF@vysl LF@a
PUSHS TF@$result
POPS LF@vysl

#--- a = a - 1 ----
CREATEFRAME
DEFVAR TF@$operand1
DEFVAR TF@$operand2
DEFVAR TF@$result

SUB TF@$result LF@a int@1

PUSHS TF@$result

POPS LF@a

JUMP $for0
#----KONEC 


LABEL $for_end0

POPFRAME
EXIT int@0










